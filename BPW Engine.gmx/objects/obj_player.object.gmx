<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//player stuff
xx = 480;
yy = 320;
dir = 0;
pit = 90;
rdir = 0;
rpit = 0;
z = 0;
zheight = 56;
xspeed = 0;
yspeed = 0;
zspeed = 0;
rot = 0;
headz = 48;
hp = 128;
running = 0;
movespeed = 0;
energy = 128;
crouch = false;
cantmove_x = false;
cantmove_y = false;
cantmove_z = false;
//gamestuff
mouse_sensitivity = 3;
can_look = true;
prev_can_look = true;
teleportation = 47;
viewdist = 256
window_mouse_set(window_get_width()/2,window_get_height()/2);
destination = room+1;
//really complicated walking stuff
material = 0;
sped = 0;
pathy = 0;
prevpathy = 0;
pathyspeed = 0;
prevpathyspeed = 0;
canpath = true;
//playerpos
x *= 2;
y *= 2;

//keys
/*
moveforwardkey = ord("W");
movebackwardkey = ord("S");
moveleftkey = ord("A");
moverightkey = ord("D");
moveupkey = vk_space;
movedownkey = vk_control;
searchleftkey = ord("Q");
searchrightkey = ord("E");
movefastkey = vk_shift;
mouselockkey = ord("V");
pausekey = vk_escape;
do_moveforward = false;
do_movebackward = false;
do_moveleft = false;
do_moveright = false;
do_moveup = false;
do_movedown = false;
do_searchleft = false;
do_searchright = false;
do_movefast = false;
do_mouselock = false;
do_pause = false;*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canpath = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if can_look != prev_can_look
{
    window_mouse_set(window_get_width()/2,window_get_height()/2);
}
with(obj_camera)
{
    x = other.x;
    y = other.y;
    z = other.z+other.headz;
    dir = other.dir;
    pit = other.pit;
    rot += other.rot;
}
if can_look
{
    rdir -= (window_mouse_get_x()-(window_get_width()/2))/mouse_sensitivity;
    rpit -= (window_mouse_get_y()-(window_get_height()/2))/mouse_sensitivity;
    window_mouse_set(window_get_width()/2,window_get_height()/2);
}
if (keyboard_check_pressed(ord("V")) &amp;&amp; !obj_pause.pause) || keyboard_check_pressed(vk_escape) can_look = !can_look;
dir = mean(dir,dir,dir,dir,dir,dir,rdir);
pit = mean(pit,pit,pit,pit,pit,pit,rpit);
rot = mean(rot,rot,rot,rot,rot,rot,0);
headz = mean(headz,headz,headz,headz,(!crouch*24)+24);
if dir &gt; 360
{
    rdir -= 360;
    dir -= 360;
}
if dir &lt; 0
{
    rdir += 360;
    dir += 360;
}
xx = x;
yy = y;

pathy = obj_cmpath.y;
pathyspeed = pathy-prevpathy;

if teleportation &gt;= 48
{
    room_goto(destination);
}
teleportation -= 1;
if teleportation &lt; 0 teleportation = 0;

if rpit &gt; 89 rpit = 89;
if rpit &lt; -89 rpit = -89;
if keyboard_check(vk_shift) running += 0.05; else running -= 0.1;
running = clamp(running,0,1);

var ismoving = false;

if energy &gt; 0
{
    if keyboard_check(ord("W"))
    {
        xspeed += lengthdir_x(movespeed+running,dir);
        yspeed += lengthdir_y(movespeed+running,dir);
    //    obj_cmpath.enabled = true;
        ismoving = true;
        movespeed += 0.05;
    }
    if keyboard_check(ord("S"))
    {
        xspeed += lengthdir_x(movespeed+running,dir+180);
        yspeed += lengthdir_y(movespeed+running,dir+180);
    //    obj_cmpath.enabled = true;
        ismoving = true;
        movespeed += 0.05;
    }
    if keyboard_check(ord("A"))
    {
        xspeed += lengthdir_x(movespeed+running,dir+90);
        yspeed += lengthdir_y(movespeed+running,dir+90);
        rot += 1;
    //    obj_cmpath.enabled = true;
        ismoving = true;
        movespeed += 0.05;
    }
    if keyboard_check(ord("D"))
    {
        xspeed += lengthdir_x(movespeed+running,dir-90);
        yspeed += lengthdir_y(movespeed+running,dir-90);
        rot -= 1;
    //    obj_cmpath.enabled = true;
        ismoving = true;
        movespeed += 0.05;
    }
    if keyboard_check(vk_space) &amp;&amp; cantmove_z &amp;&amp; energy &gt;= 12
    {
        zspeed += 4;
        energy -= 12;
    }
}

if keyboard_check(vk_control)
{
    crouch = true;
}
else crouch = false;

if !ismoving
{
    movespeed -= 0.1;
    energy += 0.125;
}
else
{
    energy -= running/5;
}
if running &lt; 0.6 energy += 0.125;
movespeed = clamp(movespeed,0,1);
energy = clamp(energy,0,128);

rot += (obj_cmpath.x/50)*movespeed*running;

var floorpoint = collision_point(x,y,par_floor,false,true);
if floorpoint != noone
{
    material = floorpoint.material;
    
    var snd;
    switch(material)
    {
        case 0: //board
            snd = choose(snd_boardstep00,snd_boardstep01,snd_boardstep02,snd_boardstep03,
                snd_boardstep04,snd_boardstep05,snd_boardstep06);
            break;
        case 1: //wood
            snd = choose(snd_woodstep00,snd_woodstep01,snd_woodstep02);
            break;
        case 2: //dirt
            snd = choose(/*snd_dirtstep00,snd_dirtstep01*/snd_dirtstepnew00,snd_dirtstepnew01,
                snd_dirtstepnew02,snd_dirtstepnew03);
            break;
        default:
            snd = choose(snd_boardstep00,snd_boardstep01,snd_boardstep02,snd_boardstep03,
                snd_boardstep04,snd_boardstep05,snd_boardstep06,snd_dirtstep00,snd_dirtstep01
                ,snd_woodstep00,snd_woodstep01,snd_woodstep02);
    }

    if sped &lt; 0 &amp;&amp; !audio_is_playing_steps() &amp;&amp; ismoving &amp;&amp; prevpathyspeed &gt; pathyspeed &amp;&amp; canpath
    {
        audio_play_sound(snd,5,false);
        canpath = false;
        alarm[0] = 10;
    }
}
if keyboard_check(ord("E"))
{
    rot -= 1;
}
if keyboard_check(ord("Q"))
{
    rot += 1;
}

/*if mouse_check_button_pressed(mb_left)
{
    var inst = instance_create(x,y,obj_activate);
    with(inst)
    {
        speed = 2;
        direction = other.dir;
    }
    var inst_ = instance_nearest(x,y,obj_futuredoor_horiz);
    if(point_distance(x,y,inst_.x,inst_.y) &lt; 64)
    {
        inst_.opening = true;
        show_message_async("trigger");
    }
    inst_ = instance_nearest(x,y,obj_futuredoor_verti);
    if(point_distance(x,y,inst_.x,inst_.y) &lt; 64)
    {
        inst_.opening = true;
        show_message_async("trigger");
    }
}*/

xspeed /= 1.7+(crouch/4);
yspeed /= 1.7+(crouch/4);


var cantmove = player_move();

if cantmove
{
    if !audio_is_playing(snd_wallslide)
    {
        var snd = audio_play_sound(snd_wallslide,4,false);
        audio_sound_gain(snd,mean(abs(xspeed/1.43),abs(yspeed/1.43)),0);
    }
}
prev_can_look = can_look;
prevpathy = pathy;
prevpathyspeed = pathyspeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_elevator">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.ison teleportation += 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_teleporter">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>teleportation += 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var col = draw_get_color();
var alph = draw_get_alpha();
draw_background_ext(ef_vignette,0,0
    ,window_get_width()/background_get_width(ef_vignette)
    ,window_get_height()/background_get_height(ef_vignette),0,c_black,1);
draw_set_color(c_orange);
draw_set_alpha(0.5);
draw_set_halign(fa_center);
draw_roundrect(8,window_get_height()-40,72,window_get_height()-8,false);
draw_set_color(c_blue);
draw_roundrect(80,window_get_height()-40,144,window_get_height()-8,false);
draw_set_alpha(1);
if obj_gameoptions.dozenalnumbers
    draw_text(112,window_get_height()-32,toBase(energy,12));
else
    draw_text(112,window_get_height()-32,string(floor(energy)));
draw_set_color(c_orange);
if obj_gameoptions.dozenalnumbers
draw_text(40,window_get_height()-32,toBase(hp,12));
else
draw_text(40,window_get_height()-32,string(hp));
draw_set_color(col);
draw_set_alpha(alph);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_set_fog(true,c_black,0,256);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
